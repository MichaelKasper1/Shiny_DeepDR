sample_final <- list(as.matrix(exp_data))
predictions <- predict(model, sample_final)
predictions <- round(predictions, 4)
return(data.frame(predictions))
}
mut_data <- readRDS("data/example_data_for_test_function/gene_mut/gene_mut_tcga_maf_1samples.RDS")
data.values <- "TPM"
log_transform <- "1"
exp_data =  readRDS("data/example_data_for_test_function/gene_exp/gene_exp_tcga_tpm_1samples.RDS")
genelist = NA
!is.data.frame(exp_data)
!is.data.frame(mut_data) &&  is.na(genelist)
is.data.frame(mut_data)
#Expression data
exp_out <- ShinyDeepDR_input_exp(
inputData = exp_data,
data.values = data.values,
selectID = NA,
log2_transform = log_transform ,
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
is.data.frame(mut_data) && is.na(genelist)
mut_out <- ShinyDeepDR_input_mut(
inputData = mut_data,
data.format = "MAF",
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
cell_type = "CCLE"
ccle_nn_exp <-
ShinyDeepDR_NearestNeighbor_cor(
exp.data =  exp_out@exp_final,
mut.data = NULL,
data.select = "CCLE",
cell.info = cell.info,
data.source = data.source.exp,
drug.ic50 = drug.ic50,
drug.info = drug.info
)
ccle_exp <- ccle_nn_exp@cor_table
ccle_exp <-
ccle_exp %>% add_column(order_exp = seq(1, nrow(ccle_exp), 1), .after = "Corr")
#mutation
ccle_nn_mut <- ShinyDeepDR_NearestNeighbor_cor(
exp.data = NULL,
mut.data =  mut_out@mutation_table,
data.select = "CCLE",
mutation_similarity_method = "jaccard",
cell.info = cell.info,
data.source = data.source.mut,
drug.ic50 = drug.ic50,
drug.info = drug.info
)
ccle_mut <- ccle_nn_mut@mut_similarity
ccle_mut <-
ccle_mut %>% add_column(order_mut = seq(1, nrow(ccle_mut), 1), .after = "value")
out_table =  merge(ccle_exp[, c(1:3)], ccle_mut[, c(1:3)], by = "DepMapID" , sort = F)
out_table$order <- out_table$order_exp + out_table$order_mut
out_table <- out_table[order(out_table$order, decreasing = F), ]
out_table.final <- out_table[, c("DepMapID" , "Corr", "value")]
out_table.final <-
merge(out_table.final,
cell.info,
by = "DepMapID" ,
sort = F)
exp_data.input <- exp_out@exp_final
rownames(exp_data.input) <- exp_data.input$Gene
#exp_data.input <- data.frame(exp_data.input[,-1])
exp_data.input.t <-
matrix(
t(exp_data.input[, -1]),
nrow = ncol(exp_data.input) - 1,
ncol = nrow(exp_data.input),
dimnames = list(colnames(exp_data.input)[-1],
rownames(exp_data.input))
)
mut_data.input <- mut_out@mutation_table
rownames(mut_data.input) <- mut_data.input$Gene
mut_data.input.t <-
matrix(
t(mut_data.input[, -1]),
nrow = ncol(mut_data.input) - 1,
ncol = nrow(mut_data.input),
dimnames = list(colnames(mut_data.input)[-1],
mut_data.input$Gene)
)
dt <- data.table(Pred_Gen(
mut_data = mut_data.input.t,
exp_data = exp_data.input.t,
model =  model
))
colnames(dt) <- drug_names
dt <- as.data.frame(t(dt))
colnames(dt) <-
"Log_predict_IC50" #rownames(exp_data.input.t)
dt <-
dt %>% add_column(DrugName = drug_names, .before =  "Log_predict_IC50")
drug.info.drugname <- drug.info$colname
drug.info.drugname[256] <- "Salubrinal"
dt <- dt[match(dt$DrugName, drug.info.drugname), ]
#add sample information
table.out <- ShinyDeepDR_predict_drug_table(
inputData = dt,
cell_type = cell_type,
ccle_ic50Pred = ccle_ic50_Pred ,
gdsc_ic50 = drug.ic50,
tcga_ic50Pred = tcga_ic50Pred,
gdsc_drugInfo = drug.info[, c(1:12, 15)]
)#Pred_performance_FullDeepDR
table.out <-
table.out[order(table.out$Log_predict_IC50, decreasing = F), ]
exp_out@log2_transform
log_transform <- "2"
#Expression data
exp_out <- ShinyDeepDR_input_exp(
inputData = exp_data,
data.values = data.values,
selectID = NA,
log2_transform = log_transform ,
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
log_transform <- "2"
exp_out@log2_transform
#Expression data
exp_out <- ShinyDeepDR_input_exp(
inputData = exp_data,
data.values = data.values,
selectID = NA,
log2_transform = log_transform ,
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
exp_data.input <- exp_out@exp_final
View(exp_data.input)
sum(is.na(exp_data.input$V2))
rownames(exp_data.input) <- exp_data.input$Gene
#exp_data.input <- data.frame(exp_data.input[,-1])
exp_data.input.t <-
matrix(
t(exp_data.input[, -1]),
nrow = ncol(exp_data.input) - 1,
ncol = nrow(exp_data.input),
dimnames = list(colnames(exp_data.input)[-1],
rownames(exp_data.input))
)
View(exp_data.input.t)
mut_data.input <- mut_out@mutation_table
rownames(mut_data.input) <- mut_data.input$Gene
mut_data.input.t <-
matrix(
t(mut_data.input[, -1]),
nrow = ncol(mut_data.input) - 1,
ncol = nrow(mut_data.input),
dimnames = list(colnames(mut_data.input)[-1],
mut_data.input$Gene)
)
dt <- data.table(Pred_Gen(
mut_data = mut_data.input.t,
exp_data = exp_data.input.t,
model =  model
))
sum(exp_data.input$V2 == " ")
sum(exp_data.input$V2 == "")
View(mut_data.input)
sum(is.na(mut_data.input$sample1))
#Expression data
exp_out <- ShinyDeepDR_input_exp(
inputData = exp_data,
data.values = data.values,
selectID = NA,
log2_transform = log_transform ,
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
#Mutation data
if (is.data.frame(mut_data) && is.na(genelist)) {
mut_out <- ShinyDeepDR_input_mut(
inputData = mut_data,
data.format = "MAF",
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
}else {
mut_out <- ShinyDeepDR_input_mut(
inputData = genelist,
data.format = "LIST",
sample_names = exp_out@sample_ID[1],
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
}
exp_data.input <- exp_out@exp_final
rownames(exp_data.input) <- exp_data.input$Gene
#exp_data.input <- data.frame(exp_data.input[,-1])
exp_data.input.t <-
matrix(
t(exp_data.input[, -1]),
nrow = ncol(exp_data.input) - 1,
ncol = nrow(exp_data.input),
dimnames = list(colnames(exp_data.input)[-1],
rownames(exp_data.input))
)
View(exp_data.input.t)
mut_data.input <- mut_out@mutation_table
rownames(mut_data.input) <- mut_data.input$Gene
mut_data.input.t <-
matrix(
t(mut_data.input[, -1]),
nrow = ncol(mut_data.input) - 1,
ncol = nrow(mut_data.input),
dimnames = list(colnames(mut_data.input)[-1],
mut_data.input$Gene)
)
dt <- data.table(Pred_Gen(
mut_data = mut_data.input.t,
exp_data = exp_data.input.t,
model =  model
))
View(mut_data.input.t)
colnames(exp_data.input)[-1]
View(exp_data.input)
#Expression data
exp_out <- ShinyDeepDR_input_exp(
inputData = exp_data,
data.values = data.values,
selectID = NA,
log2_transform = log_transform ,
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
exp_data.input <- exp_out@exp_final
exp_out@exp_final
inputData = exp_data
data.values = data.values
selectID = NA
log2_transform = log_transform
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
colnames(inputData)[1] <- "Gene"
inputData$Gene <- toupper(inputData$Gene)
if (!is.na(selectID)) {
inputData <- inputData[,c("Gene", selectID)]
}
Gene = inputData$Gene
inputData =as.data.frame( cbind(Gene, log2(inputData[,-1]+1)))
log2_transform = "No"
exp.out <- new("input_exp",
inputData = inputData,
inputData.type = data.values,
sample_ID = colnames(inputData)[-1],
log2_transform = log2_transform ,
genelist.update = ShinyDeepDR_CheckGeneSymbol(inputData = inputData,data.type = "exp",alias.table = alias.table),
genelist = inputData$Gene
)
sum(toupper(inputData$Gene) %in% ccle.exp.index.missingVal$Gene) != nrow(ccle.exp.index.missingVal)
sum(toupper(inputData$Gene) %in% ccle.exp.index.missingVal$Gene)
View(inputData)
View(exp_data)
exp_data =  readRDS("data/example_data_for_test_function/gene_exp/gene_exp_tcga_tpm_1samples.RDS")
#Expression data
exp_out <- ShinyDeepDR_input_exp(
inputData = exp_data,
data.values = data.values,
selectID = NA,
log2_transform = log_transform ,
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
exp_data.input <- exp_out@exp_final
View(exp_data.input)
View(exp_data)
colnames(inputData)[1] <- "Gene"
inputData$Gene <- toupper(inputData$Gene)
if (!is.na(selectID)) {
inputData <- inputData[,c("Gene", selectID)]
}
colnames(inputData)
colnames(exp_data)
inputData = exp_data
colnames(inputData)[1] <- "Gene"
inputData$Gene <- toupper(inputData$Gene)
if (!is.na(selectID)) {
inputData <- inputData[,c("Gene", selectID)]
}
colnames(inputData)
#Expression data
exp_out <- ShinyDeepDR_input_exp(
inputData = exp_data,
data.values = data.values,
selectID = NA,
log2_transform = log_transform ,
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
exp_data.input <- exp_out@exp_final
exp_data.input <- exp_out@exp_final
View(exp_data.input)
View(exp_data)
rm(exp_data.input)
Gene = inputData$Gene
inputData =as.data.frame( cbind(Gene, log2(inputData[,-1]+1)))
View(inputData)
#Date: 20221102
#Function: check gene expression data
#20230215
#a. add command line to check order of gene symbols
#b. Filled missing values
#example:
#gene expression
# inputData <-  read.delim("example_data_for_test_function/gene_exp/gene_exp_fpkm_txt", sep = "\t", stringsAsFactors = F)
ShinyDeepDR_input_exp <- function(inputData,data.values = c("TPM", "RPKM","FPKM"),selectID=NA,
log2_transform = c(1, 2),
alias.table = "../ccle_exp_and_mut_with_gene_alias.RData"){
library(methods)
load("data/ccle_exp_and_mut_index_missingVal.RData")
load("data/CCLE_22Q2/ccle_22Q2_expression_cells_1406.RData")
source("function/CheckGeneSymbol.R")
source("function/gene_exp_Convert2TPM.R")
#created S4 object
setClass(Class = "input_exp",
representation = representation(inputData = "data.frame",
inputData.type = "character",
sample_ID = "character",
genelist = "character",
log2_transform = "character",
genelist.update = "data.frame",
inputData.rpkm2tpm = "data.frame",
exp_final = "data.frame"))
colnames(inputData)[1] <- "Gene"
inputData$Gene <- toupper(inputData$Gene)
if (!is.na(selectID)) {
inputData <- inputData[,c("Gene", selectID)]
}
#TPM
if (data.values == "TPM") {
if (log2_transform == 1) {
log2_transform = "YES"
}else{
Gene = inputData$Gene
sampleName <- colnames(inputData)[-1]
inputData =as.data.frame( cbind(Gene, log2(inputData[,-1]+1)))
colnames(inputData)[-1] <- sampleName
log2_transform = "No"
}
exp.out <- new("input_exp",
inputData = inputData,
inputData.type = data.values,
sample_ID = colnames(inputData)[-1],
log2_transform = log2_transform ,
genelist.update = ShinyDeepDR_CheckGeneSymbol(inputData = inputData,data.type = "exp",alias.table = alias.table),
genelist = inputData$Gene
)
#check genes of input data
if(sum(toupper(inputData$Gene) %in% ccle.exp.index.missingVal$Gene) != nrow(ccle.exp.index.missingVal)){
idx <- which(!is.na(match(ccle.exp.index.missingVal$Gene,inputData$Gene)))
tb1 <- ccle.exp.index.missingVal
tb1[idx,2] <- inputData[,2]
colnames(tb1)[2] <- colnames(inputData)[2]
exp.out@exp_final <- tb1
}else{
exp.out@exp_final <- exp.out@inputData
}
exp.out@exp_final$Gene <-exp.out@genelist.update$gene.symbol.update
exp.out@exp_final <- exp.out@inputData[match(ccle.exp.22Q2$Gene,exp.out@inputData$Gene),]
identical(ccle.exp.index.missingVal$Gene, exp.out@exp_final$Gene)
#Filling missing values
if(sum(is.na(exp.out@exp_final[,2]))>0){
idx <- which(is.na(exp.out@exp_final[,2]))
exp.out@exp_final[idx,2] <- ccle.exp.index.missingVal$missing_val[idx]
}
}
#convert rpkm or fpkm to tpm
if (data.values != "TPM") {
if (log2_transform == 1) {
log2_transform = "YES"
Gene = inputData$Gene
inputData =as.data.frame( cbind(Gene, (2^inputData[,-1])-1))
inputData[,-1] <- as.numeric(inputData[,-1] )
}else{
log2_transform = "No"
}
exp.out <- new("input_exp",
inputData = inputData,
inputData.type = data.values,
sample_ID = colnames(inputData)[-1],
log2_transform = log2_transform ,
genelist.update = ShinyDeepDR_CheckGeneSymbol(inputData = inputData,data.type = "exp",alias.table = alias.table),
genelist = inputData$Gene
)
rpkm2tpm <- ShinyDeepDR_exp_convert2TPM(inputData = exp.out@inputData)
colnames(rpkm2tpm ) <- exp.out@sample_ID
rownames(rpkm2tpm ) <- exp.out@genelist.update$gene.symbol.update
exp.out@inputData.rpkm2tpm  <-as.data.frame( log2(rpkm2tpm +1) )
exp.out@exp_final <-  exp.out@inputData.rpkm2tpm  %>% add_column(Gene =  exp.out@genelist.update$gene.symbol.update,
.before = colnames(exp.out@inputData.rpkm2tpm )[1] )
#check genes of input data
if(sum(toupper(exp.out@exp_final$Gene) %in% ccle.exp.index.missingVal$Gene) != nrow(ccle.exp.index.missingVal)){
idx <- which(!is.na(match(ccle.exp.index.missingVal$Gene,exp.out@exp_final$Gene)))
tb1 <- ccle.exp.index.missingVal
tb1[idx,2] <- exp.out@exp_final[,2]
colnames(tb1)[2] <- colnames(inputData)[2]
exp.out@exp_final <- tb1
}
exp.out@exp_final <- exp.out@exp_final[match(ccle.exp.index.missingVal$Gene,exp.out@exp_final$Gene),]
identical(ccle.exp.index.missingVal$Gene, exp.out@exp_final$Gene)
#Filling missing values
if(sum(is.na(exp.out@exp_final[,2]))>0){
idx <- which(is.na(exp.out@exp_final[,2]))
exp.out@exp_final[idx,2] <- ccle.exp.index.missingVal$missing_val[idx]
}
}
rownames(exp.out@exp_final) <- exp.out@exp_final$Gene
return(exp.out)
}
#Expression data
exp_out <- ShinyDeepDR_input_exp(
inputData = exp_data,
data.values = data.values,
selectID = NA,
log2_transform = log_transform ,
alias.table = "data/ccle_exp_and_mut_with_gene_alias.RData"
)
exp_data.input <- exp_out@exp_final
rownames(exp_data.input) <- exp_data.input$Gene
#exp_data.input <- data.frame(exp_data.input[,-1])
exp_data.input.t <-
matrix(
t(exp_data.input[, -1]),
nrow = ncol(exp_data.input) - 1,
ncol = nrow(exp_data.input),
dimnames = list(colnames(exp_data.input)[-1],
rownames(exp_data.input))
)
mut_data.input <- mut_out@mutation_table
rownames(mut_data.input) <- mut_data.input$Gene
mut_data.input.t <-
matrix(
t(mut_data.input[, -1]),
nrow = ncol(mut_data.input) - 1,
ncol = nrow(mut_data.input),
dimnames = list(colnames(mut_data.input)[-1],
mut_data.input$Gene)
)
dt <- data.table(Pred_Gen(
mut_data = mut_data.input.t,
exp_data = exp_data.input.t,
model =  model
))
range(mut_data.input$sample1)
range(exp_data.input$sample1)
exp_data.input$sample1 <- as.numeric(exp_data.input$sample1)
#exp_data.input <- data.frame(exp_data.input[,-1])
exp_data.input.t <-
matrix(
t(exp_data.input[, -1]),
nrow = ncol(exp_data.input) - 1,
ncol = nrow(exp_data.input),
dimnames = list(colnames(exp_data.input)[-1],
rownames(exp_data.input))
)
range(exp_data.input.t[1,])
dt <- data.table(Pred_Gen(
mut_data = mut_data.input.t,
exp_data = exp_data.input.t,
model =  model
))
class(inputData[,-1])
a <- apply(X = exp.out@exp_final[,-1],MARGIN = 2,FUN = as.numeric)
apply(X = exp.out@exp_final[,-1],MARGIN = 2,FUN = as.numeric)
}
exp_data.input <- exp_out@exp_final
rownames(exp_data.input) <- exp_data.input$Gene
exp_data.input[,-1] <- apply(X = exp_data.input[,-1],MARGIN = 2,FUN =  as.numeric)
exp_data.input[,-1]
exp_data.input[,-1] <- apply(X = exp_data.input[,-1],MARGIN = 2,FUN =  as.numeric)
apply(X = exp_data.input[,-1],MARGIN = 2,FUN =  as.numeric)
apply(X = exp_data.input[,-1],MARGIN = 1,FUN =  as.numeric)
dim(exp_data.input[,-1])
exp_data.input <- exp_out@exp_final
rownames(exp_data.input) <- exp_data.input$Gene
dim(exp_data.input[,-1])
exp_data.input[,2] <- as.numeric(exp_data.input[,2])
#exp_data.input <- data.frame(exp_data.input[,-1])
exp_data.input.t <-
matrix(
t(exp_data.input[, -1]),
nrow = ncol(exp_data.input) - 1,
ncol = nrow(exp_data.input),
dimnames = list(colnames(exp_data.input)[-1],
rownames(exp_data.input))
)
mut_data.input <- mut_out@mutation_table
rownames(mut_data.input) <- mut_data.input$Gene
mut_data.input.t <-
matrix(
t(mut_data.input[, -1]),
nrow = ncol(mut_data.input) - 1,
ncol = nrow(mut_data.input),
dimnames = list(colnames(mut_data.input)[-1],
mut_data.input$Gene)
)
dt <- data.table(Pred_Gen(
mut_data = mut_data.input.t,
exp_data = exp_data.input.t,
model =  model
))
class(exp_data.input[,-1])
exp_data.input <- exp_out@exp_final
class(exp_data.input[,-1])
class(mut_data.input$sample1)
exp_data <- read.delim("~/Desktop/sample1.normal.input.tpm.txt")
View(exp_data)
exp_data <- read.delim("~/Desktop/sample1.normal.input.tpm.txt")
View(exp_data)
exp_data <- read.delim("~/Desktop/sample1.normal.input.tpm.txt", sep = "\t")
exp_data <- read.delim("~/Desktop/sample1.normal.input.tpm.txt", sep = "\t")
class(exp_data$sample1.normal)
colnames(exp_data)[1] <- "Gene"
exp_data$Gene <- toupper(exp_data$Gene)
data.values <- "TPM"
log_transform <- "2"
