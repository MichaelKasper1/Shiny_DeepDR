cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
cir_big = (77/10)/2
h.small = 56/10
cir_small= (40/10)/2
h=(h.small* cir_small)/(cir_big- cir_small)
cone_big <- (3.14*cir_big^2)*h/3
cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
cir_big = (60/10)/2
h.small = 45/10
cir_small= (56/10)/2
h=(h.small* cir_small)/(cir_big- cir_small)
cone_big <- (3.14*cir_big^2)*h/3
cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
cir_big = (53/10)/2
h.small = 37/10
cir_small= (50/10)/2
h=(h.small* cir_small)/(cir_big- cir_small)
cone_big <- (3.14*cir_big^2)*h/3
cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
cir_big = (60/10)/2
h.small = 45/10
cir_small= (56/10)/2
h=(h.small* cir_small)/(cir_big- cir_small)
cone_big <- (3.14*cir_big^2)*h/3
cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
cir_big = (65/10)/2
h.small = 47/10
cir_small= (34/10)/2
h=(h.small* cir_small)/(cir_big- cir_small)
cone_big <- (3.14*cir_big^2)*h/3
cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
cir_big = (60/10)/2
h.small = 45/10
cir_small= (56/10)/2
h=(h.small* cir_small)/(cir_big- cir_small)
cone_big <- (3.14*cir_big^2)*h/3
cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
cir_big = (53/10)/2
h.small = 37/10
cir_small= (50/10)/2
h=(h.small* cir_small)/(cir_big- cir_small)
cone_big <- (3.14*cir_big^2)*h/3
cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
cir_big = (45/10)/2
h.small = 33/10
cir_small= (45/10)/2
h=(h.small* cir_small)/(cir_big- cir_small)
cone_big <- (3.14*cir_big^2)*h/3
cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
cir_big^2*3.14*h.small
cir_big = (60/10)/2
h.small = 45/10
cir_small= (56/10)/2
h=(h.small* cir_small)/(cir_big- cir_small)
cone_big <- (3.14*cir_big^2)*h/3
cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
cir_big = (53/10)/2
h.small = 37/10
cir_small= (50/10)/2
h=(h.small* cir_small)/(cir_big- cir_small)
cone_big <- (3.14*cir_big^2)*h/3
cone_small <- (3.14*cir_small^2)*h.small/3
cone_big- cone_small
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv"),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
file <- input$file1
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
read.csv(file$datapath, header = input$header)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv"),
checkboxInput("header", "Header", TRUE),
example1 = actionBttn(inputId = "both_upload",label = "Example",
size = "md", style = "simple", color = "primary"),
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
file <- input$file1
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
read.csv(file$datapath, header = input$header)
})
}
library(shinyBS)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv"),
checkboxInput("header", "Header", TRUE),
example1 = actionBttn(inputId = "both_upload",label = "Example",
size = "md", style = "simple", color = "primary"),
),
mainPanel(
tableOutput("contents")
)
)
)
library(shinyWidgets)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv"),
checkboxInput("header", "Header", TRUE),
example1 = actionBttn(inputId = "both_upload",label = "Example",
size = "md", style = "simple", color = "primary"),
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
file <- input$file1
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
read.csv(file$datapath, header = input$header)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv"),
#checkboxInput("header", "Header", TRUE),
example1 = actionBttn(inputId = "both_upload",label = "Example",
size = "md", style = "simple", color = "primary"),
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
file <- input$file1
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
read.csv(file$datapath, header = input$header)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv"),
#checkboxInput("header", "Header", TRUE),
example1 = actionBttn(inputId = "both_upload",label = "Example",
size = "md", style = "simple", color = "primary")
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
file <- input$file1
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
read.csv(file$datapath, header = input$header)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv")
#checkboxInput("header", "Header", TRUE),
),
mainPanel(
example1 = actionBttn(inputId = "both_upload",label = "Example",
size = "md", style = "simple", color = "primary"),
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
file <- input$file1
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
read.csv(file$datapath, header = input$header)
})
}
shinyApp(ui, server)
setwd("~/Desktop/DeepDRShiny_version2/data/")
maf <- read.delim("example_data_for_test_function/gene_mut/data_mutations_mskcc_maf.txt", sep = "\t")
View(maf)
unique(maf$Tumor_Sample_Barcode)
maf.out <- maf[which(maf$Tumor_Sample_Barcode == "ACINAR01"),]
maf.out$Tumor_Sample_Barcode == "Sample1"
maf.out$Tumor_Sample_Barcode =<"Sample1"
maf.out$Tumor_Sample_Barcode <- "Sample1"
View(maf.out)
maf$Center = NA
maf.out$Center = NA
write.table(maf.out, file = "example_data_for_test_function/gene_mut/data_mutations_mskcc_maf_sample1.txt", sep = "\t",
quote = F, col.names = T, row.names = F)
exp <- read.delim("example_data_for_test_function/gene_exp/gene_exp_ccle_tpm_5samples.txt", sep = "\t")
View(exp)
exp.out <- exp[,c(1,2)]
View(exp.out)
colnames(exp.out)[2] <-"Sample1"
write.table(exp.out, file = "example_data_for_test_function/gene_exp/gene_exp_ccle_tpm_1samples.txt", sep = "\t",
quote = F, col.names = T, row.names = F)
library(rcdk)
df <- read.delim("GDSC_paper/Table_S1FG_compound_PubChem_CID_SMILES.txt")
View(df)
i=1
smile.code.object <- parse.smiles(df$PubChem_SMILES[i])
i=2
smile.code.object <- parse.smiles(df$PubChem_SMILES[i])
outfile <- paste0(df$Drug[i],".png")
# Generate the png
png(outfile)
depictor <- get.depictor( width=400, height=400,zoom = 2)
img <- view.image.2d(molecule = smile.code.object[[1]],
depictor = depictor)
plot(NA, xlim = c(0, 2), ylim = c(0, 4), type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",ann = F,bty = 'n')
rasterImage(image = img,
xleft =  0,ybottom =  0,
xright = 2, ytop = 4)
dev.off()
paste0("GDSC_paper/DrugStructure/",df$Drug[i],".png")
plot(labels = "A")
plot(text = "A")
par(mar = c(0, 0, 0, 0))
plot(x = 0:1,                   # Create empty plot
y = 0:1,
ann = F,
bty = "n",
type = "n",
xaxt = "n",
yaxt = "n")
text(x = 0.5,                   # Add text to empty plot
y = 0.5,
"This is my first line of text!\nAnother line of text.\n(Created by Base R)",
cex = 1.8)
View(df)
load("drug_names.RData")
drug_names
i=40
smile.code.object <- parse.smiles(df$PubChem_SMILES[i])
outfile <- paste0("GDSC_paper/DrugStructure/",df$Drug[i],".png")
# Generate the png
png(outfile)
depictor <- get.depictor( width=400, height=400,zoom = 2)
img <- view.image.2d(molecule = smile.code.object[[1]],
depictor = depictor)
plot(NA, xlim = c(0, 2), ylim = c(0, 4), type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",ann = F,bty = 'n')
rasterImage(image = img,
xleft =  0,ybottom =  0,
xright = 2, ytop = 4)
dev.off()
setwd("~/Desktop/DeepDRShiny_version2/data/")
df <- read.delim("GDSC_paper/Table_S1FG_compound_PubChem_CID_SMILES.txt")
library(rcdk)
for(i in 1:nrow(df)){
if(!is.na(df$PubChem_SMILES[i])){
smile.code.object <- parse.smiles(df$PubChem_SMILES[i])
# A temp file to save the output.
# This file will be removed later by renderImage
outfile <- paste0("GDSC_paper/DrugStructure/",df$Drug[i],".png")
# Generate the png
png(outfile)
depictor <- get.depictor( width=400, height=400,zoom = 2)
img <- view.image.2d(molecule = smile.code.object[[1]],
depictor = depictor)
plot(NA, xlim = c(0, 2), ylim = c(0, 4), type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",ann = F,bty = 'n')
rasterImage(image = img,
xleft =  0,ybottom =  0,
xright = 2, ytop = 4)
dev.off()
}else{
png( paste0("GDSC_paper/DrugStructure/",df$Drug[i],".png"))
par(mar = c(0, 0, 0, 0))
plot(x = 0:1,                   # Create empty plot
y = 0:1,
ann = F,
bty = "n",
type = "n",
xaxt = "n",
yaxt = "n")
text(x = 0.5,                   # Add text to empty plot
y = 0.5,
"SMILES code is not available!",
cex = 1.8)
dev.off()
}
}
View(df)
smile.code.object <- parse.smiles("C1CC1COC2=CC=CC(=O)C2=C3C=C(C(=C(N3)N)C#N)C4CCNCC4")
df$PubChem_SMILES[55]
df$PubChem_SMILES[55] <- "C1CC1COC2=CC=CC(=O)C2=C3C=C(C(=C(N3)N)C#N)C4CCNCC4"
library(rcdk)
for(i in 1:nrow(df)){
if(!is.na(df$PubChem_SMILES[i])){
smile.code.object <- parse.smiles(df$PubChem_SMILES[i])
# A temp file to save the output.
# This file will be removed later by renderImage
outfile <- paste0("GDSC_paper/DrugStructure/",df$Drug[i],".png")
# Generate the png
png(outfile)
depictor <- get.depictor( width=400, height=400,zoom = 2)
img <- view.image.2d(molecule = smile.code.object[[1]],
depictor = depictor)
plot(NA, xlim = c(0, 2), ylim = c(0, 4), type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",ann = F,bty = 'n')
rasterImage(image = img,
xleft =  0,ybottom =  0,
xright = 2, ytop = 4)
dev.off()
}else{
png( paste0("GDSC_paper/DrugStructure/",df$Drug[i],".png"))
par(mar = c(0, 0, 0, 0))
plot(x = 0:1,                   # Create empty plot
y = 0:1,
ann = F,
bty = "n",
type = "n",
xaxt = "n",
yaxt = "n")
text(x = 0.5,                   # Add text to empty plot
y = 0.5,
"SMILES code is not available!",
cex = 1.8)
dev.off()
}
}
drug_names
match(df$Drug, drug_names)
identical(df$Drug, drug_names)
drug_names
drug_names[256]
drug_names[256] <- df$Drug[256]
df$Drug[256]
saveRDS(drug_names, "drug_names.RData")
save(drug_names, "drug_names.RData")
save(drug_names, file = "drug_names.RData")
load("drug_names.RData")
drug_names
identical(drug_names, df$Drug)
df$filename <- rownames(df)
df$filename <- df$Drug
df$filename[63]
df$filename[63] <- "VNLG_124"
library(rcdk)
for(i in 1:nrow(df)){
if(!is.na(df$PubChem_SMILES[i])){
smile.code.object <- parse.smiles(df$PubChem_SMILES[i])
# A temp file to save the output.
# This file will be removed later by renderImage
outfile <- paste0("GDSC_paper/DrugStructure/",df$filename[i],".png")
# Generate the png
png(outfile)
depictor <- get.depictor( width=400, height=400,zoom = 2)
img <- view.image.2d(molecule = smile.code.object[[1]],
depictor = depictor)
plot(NA, xlim = c(0, 2), ylim = c(0, 4), type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",ann = F,bty = 'n')
rasterImage(image = img,
xleft =  0,ybottom =  0,
xright = 2, ytop = 4)
dev.off()
}else{
png( paste0("GDSC_paper/DrugStructure/",df$filename[i],".png"))
par(mar = c(0, 0, 0, 0))
plot(x = 0:1,                   # Create empty plot
y = 0:1,
ann = F,
bty = "n",
type = "n",
xaxt = "n",
yaxt = "n")
text(x = 0.5,                   # Add text to empty plot
y = 0.5,
"SMILES code is not available!",
cex = 1.8)
dev.off()
}
}
plot(x = 0:1,                   # Create empty plot
y = 0:1,
ann = F,
bty = "n",
type = "n",
xaxt = "n",
yaxt = "n")
text(x = 0.5,                   # Add text to empty plot
y = 0.5,
"Please select one drug from the table!",
cex = 1.8)
png( paste0("GDSC_paper/DrugStructure/Message_plot.png"))
par(mar = c(0, 0, 0, 0))
plot(x = 0:1,                   # Create empty plot
y = 0:1,
ann = F,
bty = "n",
type = "n",
xaxt = "n",
yaxt = "n")
text(x = 0.5,                   # Add text to empty plot
y = 0.5,
"Please select one drug from the table!",
cex = 1.8)
dev.off()
drug.info <- readRDS("GDSC_paper/gdsc_265drug_info_update.RDS")
View(drug.info)
identical(drug.info$Name, drug_names)
identical(drug.info$colname, drug_names)
match(drug.info$Name, drug_names)
match(drug.info$colname, drug_names)
drug.info$filename <- drug.info$colname
match(drug.info$filename, df$filename)
drug.info$filename[63]
drug.info$filename[63] <- "VNLG_124"
drug.info$filename[256] <- "VNLG_124"
drug.info$filename <- drug.info$colname
drug.info$filename[63] <- "VNLG_124"
drug.info$filename[256]
drug.info$filename[256] <- df$filename[256]
match(drug.info$filename, df$filename)
drug.info.out <- merge(drug.info, df, by = "filename", sort = F)
View(drug.info.out)
colnames(drug.info.out)
drug.info.out <- drug.info.out[,c(2,3,4,10,5:9,1,11:12)]
View(drug.info.out)
drug.info.out <- merge(drug.info, df, by = "filename", sort = F)
drug.info.out <- drug.info.out[,c(2,3,4,10,5:9,11:12,1)]
drug.info.out <- drug.info.out[, -4]
saveRDS("GDSC_paper/gdsc_265drug_info_update.RDS")
saveRDS(drug.info.out,"GDSC_paper/gdsc_265drug_info_update.RDS")
drug.info.out <- merge(drug.info, df, by = "filename", all.x= T,sort = F)
match(drug.info$colname, df$Drug)
drug.info.out <-c(drug.info,df)
drug.info.out <-cbind(drug.info,df)
View(drug.info.out)
identical(drug.info$filename, df$filename)
match(drug.info$filename, df$filename)
drug.info$filename == df$filename
which(drug.info$filename == df$filename)
which(!drug.info$filename == df$filename)
drug.info$filename[which(!drug.info$filename == df$filename)]
df$filename[which(!drug.info$filename == df$filename)]
drug_names[which(!drug.info$filename == df$filename)]
drug.info$colname[which(!drug.info$filename == df$filename)]
drug.info$colname[which(!drug.info$filename == df$filename)] <- drug_names[which(!drug.info$filename == df$filename)]
match(drug.info$filename, df$filename)
sum(df$filename == drug.info$filename)
which(!df$filename == drug.info$filename)
df$filename[which(!drug.info$filename == df$filename)]
drug.info$colname[which(!drug.info$filename == df$filename)]
drug_names[111,117]
drug_names[c(111,117)]
df$filename[c(111,117)]
drug.info$Name[c(111,117)]
drug.info$colname[c(111,117)]
drug.info$filename[c(111,117)]
drug.info$filename[which(drug.info$Name == "Olaparib")]
drug.info$filename[which(drug.info$Name == "Olaparib")] <- c("Olaparib_(rescreen)", "Olaparib")
identical(drug.info$filename, df$filename)
saveRDS(drug.info,"GDSC_paper/gdsc_265drug_info_update.RDS")
drug.info$filename[which(drug.info$Name == "Olaparib")] <- c("Olaparib_(rescreen)", "Olaparib")
identical(drug.info$filename, df$filename)
drug.info.out <-cbind(drug.info,df)
colnames(drug.info.out)
drug.info.out <- drug.info.out[,-10]
View(drug.info.out)
saveRDS(drug.info,"GDSC_paper/gdsc_265drug_info_update.RDS")
saveRDS(drug.info.out,"GDSC_paper/gdsc_265drug_info_update.RDS")
drug.info.out <-cbind(drug.info[,-9],df)
colnames(drug.info.out)
drug.info.out <- drug.info.out[,-9]
colnames(drug.info.out)
saveRDS(drug.info.out,"GDSC_paper/gdsc_265drug_info_update.RDS")
